# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main  # Trigger se houver push para a branch 'main'

pool:
  name: Local

variables: 
    imageTag: $(Build.BuildId)$(date +"%d%m%Y")

stages:
  - stage: build
    jobs:
      # Instala o flake8 e executa análise de lint no diretório ./api
      - job: Flake8
        displayName: 'Análise flake8'
        steps:
          - script: |
              python3 -m venv venv
              source venv/bin/activate
              python -m pip install flake8
              flake8 ./api
            displayName: 'Run Python lint'
            continueOnError: "true"
      # Build da docker image
      - job: dockerbuild
        displayName: 'Build docker image'
        variables: 
        - group: g3vars
        steps:
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '28.0.4'

          - script: |
              docker login AzureHubG3.azurecr.io -u $(AzureHubG3user) -p $(AzureHubG3pass)
            displayName: 'Login to container registry'
            env:
              ACR_USERNAME: $(AzureHubG3user)
              ACR_PASSWORD: $(AzureHubG3pass)
        # Build the image
          - script: |
              echo "Building timestamp: $(date +"%d%m%Y")"
              docker build -t AzureHubG3.azurecr.io/api:$(imageTag) -f ./Dockerfile .
              docker push AzureHubG3.azurecr.io/api:$(imageTag)
            displayName: 'Build and save Docker image'
              
  - stage: deploy
    dependsOn: 
      - build
    jobs:
      # preparar deploy local
      - job: Preparartestes
        displayName: 'Preparar para testes'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.12'
              addToPath: true
          - script: |
              source venv/bin/activate
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Create and activate venv + Install prerequisites'
          - script: |
              pip install schemathesis
              python manage.py migrate
            displayName: 'Install test tool'
      # realizar testes locais ao API
      - job: Testeslocais
        displayName: 'Realizar testes locais'
        dependsOn: Preparartestes
        steps:
          - script: |
              python manage.py runserver &
              sleep 5
            displayName: 'Start server'
          - script: |
              RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8000/api/produto)
              if [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 300 ]]; then
                echo "Request succeeded with status code $RESPONSE."
              else
                echo "Request failed with status code $RESPONSE."
                exit 1
              fi
            displayName: 'Acceptance test'
            continueOnError: "false"
          - script: 
              schemathesis run --base-url=http://localhost:8000 docs/clogistica.yml \
                --checks=all \
                --validate-schema=true \
                --hypothesis-max-examples=10 \
                --junit-xml=schemathesis-results.xml
            displayName: 'Run API contract tests'
          # Publish test results
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: '**/*-results.xml'
              testRunTitle: 'API Test Results'
            condition: succeededOrFailed()


