# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main  # Trigger se houver push para a branch 'main'

pool:
  name: Local

variables: 
    imageTag: $(date +"%d%m%Y")

stages:
  - stage: build
    jobs:
      # Instala o flake8 e executa análise de lint no diretório ./api
      - job: Flake8
        displayName: 'Análise flake8'
        steps:
          - script: |
              source venv/bin/activate
              python -m pip install flake8
              flake8 ./api
            displayName: 'Run Python lint'
            continueOnError: "false"
      # Build da docker image
      - job: dockerbuild
        displayName: 'Build docker image'
        variables: 
        - group: g3vars
        steps:
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '28.0.4'

          - script: |
              docker login AzureHubG3.azurecr.io -u $(AzureHubG3user) -p $(AzureHubG3pass)
            displayName: 'Login to container registry'
            env:
              ACR_USERNAME: $(AzureHubG3user)
              ACR_PASSWORD: $(AzureHubG3pass)
        # Build the image
          - script: |
              echo "Building timestamp: $(imageTag)"
              docker build -t AzureHubG3.azurecr.io/api:$(imageTag) -f ./Dockerfile .
              docker push AzureHubG3.azurecr.io/api:$(imageTag)
            displayName: 'Build and save Docker image'
              
  - stage: deploy
    dependsOn: 
      - build
    jobs:
      # preparar deploy local
      - job: PushToMain
        displayName: 'Job triggered by push to main'
        steps:
          - script: |
              python3 -m venv venv
              source venv/bin/activate
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Create and activate venv + Install prerequisites'
      # Job 2: Runs on PR to 'production' branch
      - job: PullRequestToProduction
        displayName: 'Job triggered by PR to production'
        condition: eq(variables['Build.Reason'], 'PullRequest')  # Runs only on PRs
        steps:
          - script: |
              RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8000/api/produto)
              if [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 300 ]]; then
                echo "Request succeeded with status code $RESPONSE."
              else
                echo "Request failed with status code $RESPONSE."
                exit 1  # Stop the pipeline if the status code is not 200-299
              fi
            displayName: 'Acceptance test'
            continueOnError: "false"


