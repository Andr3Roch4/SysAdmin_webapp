image: python:3.12-slim

workflow:
  rules:
    - when: always
  # - if: '$CI_COMMIT_BRANCH != "main"'

stages:
  - build
  - deploy

Flake8:
  stage: build
  allow_failure: true
  rules:
    - changes:
      - api/**/*

  script:
    - python3 -m venv venv
    - source venv/bin/activate
    - python -m pip install flake8
    - flake8 ./api

TesteAPI:
  stage: deploy
  script:
    - apt-get update && apt-get install -y curl
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install schemathesis
    - python manage.py migrate
    - python manage.py runserver &
    - sleep 5
    - RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8000/api/produto)
    - if [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 300 ]]; then echo "Request succeeded with status code $RESPONSE."; else echo "Request failed with status code $RESPONSE."; exit 1; fi
    - source venv/bin/activate
    - echo "Running schemathesis tests..."
    - |
      schemathesis run --base-url=http://localhost:8000/api docs/clogistica.yml \
        --checks=all \
        --validate-schema=true \
        --hypothesis-max-examples=5 \
        --junit-xml=$CI_PROJECT_DIR/schemathesis-results.xml \
        --show-errors-tracebacks
    - echo "Schemathesis exit code $?"
  allow_failure: false

dockerbuild:
  stage: deploy
  needs:
    - TesteAPI
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login AzureHubG3.azurecr.io -u $AzureHubG3user -p $AzureHubG3pass
    - echo "Building timestamp $(date +"%d%m%Y")"
    - docker build -t AzureHubG3.azurecr.io/api:$CI_PIPELINE_ID -f ./Dockerfile .
    - docker push AzureHubG3.azurecr.io/api:$CI_PIPELINE_ID
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    AzureHubG3user: $CI_AZURE_USER  # Variáveis  no GitLab
    AzureHubG3pass: $CI_AZURE_PASS  # Variáveis  no GitLab
  allow_failure: false


