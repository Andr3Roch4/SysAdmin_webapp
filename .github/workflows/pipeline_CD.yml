on:
  pull_request:
    branches:
      - main
    paths:
      - 'api/**'
      - 'Dockerfile'
      - 'webapp/**'

env:
  IMG_NAME: AzureHubG3.azurecr.io/api:$(date +"%d%m%Y")
  
permissions:
  issues: write
  
jobs:
  acceptance_tests:
    name: Testes de aceitação
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install schemathesis
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run server
        run: |
          python manage.py runserver &
          sleep 5
      - name: Acceptance test
        run: |
          RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8000/api/produto)
          if [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 300 ]]; then
            echo "Request succeeded with status code $RESPONSE."
          else
            echo "Request failed with status code $RESPONSE."
            exit 1
          fi
        continue-on-error: false
      - name: Shemathesis test
        run: |
          echo "Running schemathesis tests..."
          schemathesis run --base-url=http://localhost:8000/api docs/clogistica.yml \
            --checks=all \
            --validate-schema=true \
            --hypothesis-max-examples=5 \
            --junit-xml=schemathesis-results.xml \
            --show-errors-tracebacks
          echo "Schemathesis exit code: $?"
      - name: Run ZAP API Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://localhost:8000/api/'
          openapi_url: './docs/clogistica.yml'  # Relative path from workspace root
          context: 'django_api_context'
          policy: 'API-scan-minimal'

  docker_image_build:
    name: Docker image build
    runs-on: ubuntu-latest
    needs: acceptance_tests
    steps:
      - uses: actions/checkout@v4
      - name: login to ACR
        run: |
          docker login AzureHubG3.azurecr.io -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_PASS }}
      - name: Build docker image
        run: |
          echo "Building timestamp: $(date +"%d%m%Y")"
          echo "Image tag: $IMG_NAME"
            docker build -t $IMG_NAME -f ./Dockerfile .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '$IMG_NAME'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Push docker image
        run: |
          docker push $IMG_NAME
